#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patchlog_error.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="dark_deity.port"
export PATCHZIP="darkdeity-steam.zip"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

download_patch() {
    PATCH_FILE="$1"
    MD5_FILE="$2"
    URL="$3"
    
    # Download patch and its MD5 checksum
    wget --progress=bar:force -O "$PATCH_FILE" "$URL"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to download $PATCH_FILE. Check your internet connection and verify the file exists at $URL."
        mv $LOGFILE $LOGERR
        echo "Patching process failed!"
        exit 1
    fi

    wget --progress=bar:force -O "$MD5_FILE" "${URL}.md5"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to download MD5 checksum for $PATCH_FILE."
        mv $LOGFILE $LOGERR
        echo "Patching process failed!"
        exit 1
    fi

    # Verify MD5 checksum
    expected_md5=$(cat "$MD5_FILE" | tr '[:upper:]' '[:lower:]')  # Convert expected MD5 to lowercase
    downloaded_md5=$(md5sum "$PATCH_FILE" | awk '{ print $1 }' | tr '[:upper:]' '[:lower:]')  # Convert downloaded MD5 to lowercase

    if [ "$expected_md5" != "$downloaded_md5" ]; then
        echo "Error: MD5 checksum mismatch for $PATCH_FILE. Expected: $expected_md5, Found: $downloaded_md5"
        mv $LOGFILE $LOGERR
        echo "Patching process failed!"
        exit 1
    fi
}

check_data() {
    # Make sure the patchdir is clean
    rm -rf $TOOLDIR/patches/*
    echo "Checking game data..."

    if ls "$DATADIR"/steam* >/dev/null 2>&1; then
        # Steam
        echo "Downloading Steam patch..."
        sleep 2
        for i in {001..011}; do
            PATCH_FILE="$TOOLDIR/patches/darkdeity-steam.zip.$i"
            MD5_FILE="$TOOLDIR/patchesdarkdeity-steam.zip.$i.md5"
            PATCH_URL="https://raw.githubusercontent.com/JeodC/PortMaster-DarkDeity/main/darkdeity/tools/patches/steam/darkdeity-steam.zip.$i"
            download_patch "$PATCH_FILE" "$MD5_FILE" "$PATCH_URL"
        done
        export PATCHZIP="darkdeity-steam.zip"
        export PATCH="darkdeity-steam.xdelta"
        rm -rf $DATADIR/*.dll $DATADIR/.gitkeep $DATADIR/*.exe
    elif [ -f "$DATADIR/gog.ico" ]; then
        # GOG
        echo "Downloading GOG patch..."
        sleep 2
        for i in {001..009}; do
            PATCH_FILE="$TOOLDIR/patches/darkdeity-gog.zip.$i"
            MD5_FILE="$TOOLDIR/patches/darkdeity-gog.zip.$i.md5"
            PATCH_URL="https://raw.githubusercontent.com/JeodC/PortMaster-DarkDeity/main/darkdeity/tools/patches/gog/darkdeity-gog.zip.$i"
            download_patch "$PATCH_FILE" "$MD5_FILE" "$PATCH_URL"
        done
        export PATCHZIP="darkdeity-gog.zip"
        export PATCH="darkdeity-gog.xdelta"
        rm -rf $DATADIR/*.ico $DATADIR/goggame* $DATADIR/*.lnk \
               $DATADIR/unins* $DATADIR/webcache.zip $DATADIR/*.dll \
               $DATADIR/.gitkeep $DATADIR/*.exe
    else
        echo "Unable to determine assets origin!"
        mv $LOGFILE $LOGERR
        echo "Patching process failed!"
        exit 1
    fi
}

unzip_patch() {
    if [ -f "$TOOLDIR/patches/$PATCHZIP.001" ]; then
        echo "Unzipping the patch file..."
        $TOOLDIR/7za x $TOOLDIR/patches/$PATCHZIP.001 -o$TOOLDIR/patches
        if [ $? -eq 0 ]; then
            echo "Patch file successfully extracted."
            rm -rf $TOOLDIR/patches/$PATCHZIP.*
            rm -rf $TOOLDIR/patches/*.md5
        else
            echo "Failed to extract multi-part archive."
            mv $LOGFILE $LOGERR
            echo "Patching process failed!"
            exit 1
        fi
    elif [ ! -f "$TOOLDIR/patches/darkdeity.xdelta" ]; then
        echo "Patch archive not found!"
        exit 1
    fi
}
apply_xdelta() {
    # Check if both data.win and darkdeity.xdelta files exist before applying the patch
    if [ -f "$DATADIR/data.win" ]; then
        if [ -f "$TOOLDIR/patches/$PATCH" ]; then
            output=$(xdelta3 -d -s "$DATADIR/data.win" -f "$TOOLDIR/patches/$PATCH" "$DATADIR/game.droid" 2>&1)
            if [ $? -eq 0 ]; then
                echo "Patch applied successfully"
                echo "$output"
                rm -rf "$DATADIR/data.win" "$TOOLDIR/patches"/*
            else
                echo "Failed to apply patch"
                echo "$output"
                mv $LOGFILE $LOGERR
                echo "Patching process failed!"
                exit 1
            fi
        else
            echo "No .xdelta file found; skipping patching."
        fi
    else
        echo "No data.win file found to patch!"
        echo "Patching process failed!"
        exit 1
    fi
}

compress_audio() {
    mkdir -p "$TMPDIR"

    # Run the compression tool
    PYTHON=$(which python3)
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed."
        rm -rf "$TMPDIR"
        echo "Patching process failed!"
        exit 1
    fi
}

zip_archive() {
        mv $DATADIR/splash.png .
        zip -r -0 $DATAFILE ./assets/
        echo "Zipped contents to $DATAFILE"
        rm -rf ./assets
}

process_game() { 
    mkdir -p saves
    check_data
    sleep 1
    
    # Text data must be moved to saves directory or game will crash
    [ -d "$DATADIR/Bonds" ] && mv "$DATADIR/Bonds" ./saves/Bonds
    [ -d "$DATADIR/Scenes" ] && mv "$DATADIR/Scenes" ./saves/Scenes
    [ -d "$DATADIR/Stories" ] && mv "$DATADIR/Stories" ./saves/Stories
    
    sleep 1
    echo "Unpacking xdelta patch..."
    unzip_patch
    sleep 1
    echo "Applying xdelta patch..."
    apply_xdelta
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game